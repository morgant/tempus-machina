#!/bin/sh -e

#
# tmutil - a macOS (nee OS X) work-alike powered by rsync
#

# info
tool="$(basename "$0")"
version="0.1"
copyright="(c) 2021-2024 Morgan Aldridge"

# global variables
verbose=false
host="$(hostname)"
config_path="/etc/${tool}"
verb=""

# print usage instructions (help)
usage() {
  echo "Usage: ${tool} <verb> [options]"
  echo
}

version() {
  echo "${tool} v${version} ${copyright}"
}

is_root() {
  if [ $(id -u) -ne 0 ] ; then
    return 1
  fi
}

init_path_uuid() {
  if [ -z "$1" -o ! -d "$1" ] ; then
    return 1
  fi
  if [ -f "${1}/.uuid" ] ; then
    $verbose && echo "UUID for path '$1' already exists."
  else
    if uuidgen > "${1}/.uuid" ; then
      $verbose && echo "Generated new UUID for path '$1'."
    else
      echo "Error generating UUID for path '$1'!"
      return 1
    fi
  fi
}

path_uuid() {
  if [ ! -d "${1}" -o ! -f "${1}/.uuid" ] ; then
    return 1
  fi
  cat "${1}/.uuid"
}

init_configs() {
  if [ ! -d "${config_path}" ] ; then
    if mkdir -p "${config_path}" ; then
      $verbose && echo "Created config path '${config_path}'"

      init_path_uuid "${config_path}"

      touch "${config_path}/destinations"
      $verbose && echo "Created '${config_path}/destinations' config file"

      touch "${config_path}/exclusions"
      $verbose && echo "Created '${config_path}/exclusions' config file"
    else
      echo "Error! Unable to create config path '${config_path}'!"
      return 1
    fi
  else
    $verbose && echo "Config path '${config_path}' exists"
  fi
}

root_uuid() {
  path_uuid "${config_path}"
}

is_valid_destination() {
  if [ -z "$1" -o ! -d "$1" ] ; then
    return 1
  fi
}

init_destination() {
  if ! is_valid_destination "$1" ; then
    return 1
  fi

  if [ ! -d "${1}/Backups.backupdb" ] ; then
    mkdir -p "${1}/Backups.backupdb"
    $verbose && echo "Created 'Backups.backupdb' in destination '$1'."
  else
    $verbose && echo "Destination '$1' already has a 'Backups.backupdb'."
  fi

  init_path_uuid "${1}/Backups.backupdb"

  if [ ! -d "${1}/Backups.backupdb/${host}" ] ; then
    mkdir -p "${1}/Backups.backupdb/${host}"
    $verbose && echo "Created machine directory in destination '$1'."
  else
    $verbose && echo "Destination '$1' already has a machine directory."
  fi
}

is_destination_remote() {
  echo "$1" | grep -E ".+:./+" > /dev/null
}

destination_type() {
  is_destination_remote "$1" && echo "Remote" || echo "Local"
}

destination_uuid() {
  path_uuid "${1}/Backups.backupdb"
}

has_destination_mount() {
  while IFS= read -r line ; do
    if [ "$line" = "$(destination_uuid "$1")=$1" ] ; then
      return 0
    fi
  done < "${config_path}/destinations"
  return 1
}

has_destination_uuid() {
  while IFS= read -r line ; do
    if [ "$(destination_config_uuid "$line")" = "$1" ] ; then
      return 0
    fi
  done < "${config_path}/destinations"
  return 1
}

destination_config_mount() {
  #echo "${1#$(destination_config_uuid "$1")=}"
  echo "${1#*=}"
}

destination_config_uuid() {
  #echo "$1" | grep -Eo "^[^=]+"
  echo "${1%%=*}"
}

destination_mount_by_uuid() {
  while IFS= read -r line ; do
    if [ "$(destination_config_uuid "$line")" = "$1" ] ; then
      echo "$(destination_config_mount "$line")"
      return 0
    fi
  done < "${config_path}/destinations"
  return 1
}

print_destinations() {
  while IFS= read -r line ; do
    echo "===================================================="
    echo "Name          : n/a"
    echo -n "Kind          : "
    destination_type "$(destination_config_mount "${line}")"
    echo -n "Mount Point   : "
    destination_config_mount "${line}"
    echo -n "ID            : "
    destination_config_uuid "${line}"
  done < "${config_path}/destinations"
}

remove_all_destinations() {
  echo -n "" > "${config_path}/destinations"
  $verbose && echo "Removed all destinations"
}

remove_destination() {
  if [ -z "$1" ] ; then
    echo "Error! Must provide a destination ID to remove!"
    return 1
  fi

  config_tmp="$(mktemp -d)"
  if [ ! -d "${config_tmp}" ] ; then
    echo "Error! Unable to create tmp directory!"
    return 1
  fi
  touch "${config_tmp}/destinations"

  while IFS= read -r line ; do
    if [ "$line" != "${1}=$(destination_config_mount "${line}")" ] ; then
      echo "${line}" >> "${config_tmp}/destinations"
    fi
  done < "${config_path}/destinations"

  if diff -q "${config_tmp}/destinations" "${config_path}/destinations" > /dev/null ; then
    echo "Error! Could not find destination with ID '${1}' to remove!"
    rm -r "${config_tmp}"
    return 1
  else
    echo "Removed destination with ID '${1}'."
    mv "${config_tmp}/destinations" "${config_path}/destinations"
    rm -r "${config_tmp}"
  fi
}

add_destination() {
  if ! is_valid_destination "$1" ; then
    echo "Error! Could not add '${1}' because it not a valid destination!"
    return 1
  fi

  if has_destination_mount "$1" ; then
    $verbose && echo "Destination '${1}' already added"
  else
    init_destination "$1"

    echo "$(destination_uuid "$1")=$1" >> "${config_path}/destinations"
    $verbose && echo "Added destination '${1}'"
  fi
}

machine_directory() {
  while IFS= read -r line ; do
    echo "$(destination_config_mount "${line}")/Backups.backupdb/${host}"
  done < "${config_path}/destinations"
}

is_machine_directory() {
  [ -z "$1" ] && return 1

  machine_dir_temp="$(mktemp)"
  if [ ! -f "${machine_dir_temp}" ] ; then
    echo "Error! Unable to create temporary file!"
    return 1
  fi
  machine_directory >> "${machine_dir_temp}"

  match=false
  while IFS= read -r line ; do
    if [ "$line" = "$1" ] ; then
      match=true
      break
    fi
  done < "${machine_dir_temp}"

  rm "${machine_dir_temp}"
  $match
}

machine_backups() {
  while IFS= read -r line ; do
    find "$(destination_config_mount "${line}")/Backups.backupdb/${host}" -type d -mindepth 1 -maxdepth 1 ! -name "Latest" ! -name ".*" -exec basename {} \;
  done < "${config_path}/destinations"
}

machine_in_progress_backups() {
  while IFS= read -r line ; do
    find "$(destination_config_mount "${line}")/Backups.backupdb/${host}" -type d -mindepth 1 -maxdepth 1 -name ".[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]" #-exec basename {} \;
  done < "${config_path}/destinations"
}

machine_backup_latest() {
  while IFS= read -r line ; do
    if has_destination_mount_previous_backup "$(destination_config_mount "${line}")" ; then
      destination_mount_previous_backup "$(destination_config_mount "${line}")"
    fi
  done < "${config_path}/destinations"
}

has_destination_mount_in_progress_backup() {
  [ -z "$1" ] && return 1
  if is_destination_remote "$1" ; then
    echo "ERROR! Could not determine if remote destination '${1}' has in progress backup because remote destinations are not yet supported!"
    return 1
  fi
  [ "$(find "${1}/Backups.backupdb/${host}" -type d -mindepth 1 -maxdepth 1 -name ".[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9]" | wc -l | tr -d ' ')" -gt "0" ]
}

has_destination_mount_previous_backup() {
  [ -z "$1" ] && return 1
  if is_destination_remote "$1" ; then
    echo "ERROR! Could not determine if remote destination '${1}' has previous backup because remote destinations are not yet supported!"
    return 1
  elif [ ! -d "$1" -o ! -h "${1}/Backups.backupdb/${host}/Latest" ] ; then
    return 1
  fi
}

destination_mount_previous_backup() {
  [ -z "$1" ] && return 1
  if is_destination_remote "$1" ; then
    echo "ERROR! Could not find remote destination '${1}' previous backup because remote destinations are not yet supported!"
    return 1
  else
    [ ! -d "$1" ] && return 1
    readlink "${1}/Backups.backupdb/${host}/Latest"
  fi
}

destination_mount_finalize_backup() {
  [ -z "$1" -o -z "$2" -o -z "$3" ] && return 1
  if is_destination_remote "$1" ; then
    echo "ERROR! Could not finalize remote destination '${1}' backup '${2}' because remote destinations are not yet supported!"
    return 1
  else
    [ ! -d "${1}" ] && return 1

    # move the backup to its final name
    mv "${1}/Backups.backupdb/${host}/${2}" "${1}/Backups.backupdb/${host}/${3}"

    # symlink as latest
    [ -h "${1}/Backups.backupdb/${host}/Latest" ] && rm "${1}/Backups.backupdb/${host}/Latest"
    ln -s "${1}/Backups.backupdb/${host}/${3}" "${1}/Backups.backupdb/${host}/Latest"
  fi
}

has_exclusion() {
  while IFS= read -r line ; do
    if [ "$line" = "$1" ] ; then
      return 0
    fi
  done < "${config_path}/exclusions"
  return 1
}

add_exclusion() {
  if [ -z "$1" ] ; then
    echo "Error! Must provide an exclusion!"
    return 1
  fi

  while [ $# -gt 0 ] ; do
    if has_exclusion "$1" ; then
      echo "Exclusion '${1}' already exists."
    else
      [ ! -e "$1" ] && echo "WARNING: exclusion target file or directory '${1}' does not yet exist!"
      echo "$1" >> "${config_path}/exclusions" && echo "Added exclusion '${1}'."
    fi
    shift
  done
}

remove_exclusion() {
  if [ -z "$1" ] ; then
    echo "Error! Must provide an exclusion!"
    return 1
  fi

  config_tmp="$(mktemp -d)"
  if [ ! -d "${config_tmp}" ] ; then
    echo "Error! Unable to create tmp directory!"
    return 1
  fi

  while [ $# -gt 0 ] ; do
    touch "${config_tmp}/exclusions"

    while IFS= read -r line ; do
      [ "$line" != "$1" ] && echo "${line}" >> "${config_tmp}/exclusions"
    done < "${config_path}/exclusions"

    if diff -q "${config_tmp}/exclusions" "${config_path}/exclusions" > /dev/null ; then
      echo "WARNING! Could not find exclusion '${1}' to remove!"
      rm "${config_tmp}/exclusions"
    else
      echo "Removed exclusion '${1}'."
      mv "${config_tmp}/exclusions" "${config_path}/exclusions"
    fi
    shift
  done
  rm -r "${config_tmp}"
}

is_excluded() {
  while [ $# -gt 0 ] ; do
    [ -z "$1" ] && continue

    excluded=false
    while IFS= read -r line ; do
      if echo "$1" | grep -q "${line}" ; then
        excluded=true
        break
      fi
    done < "${config_path}/exclusions"

    $excluded && echo "[Excluded] ${1}" || echo "[Included] ${1}"
    shift
  done
}

is_backup_directory() {
  match=false
  if [ -n "$1" -a -d "$1" ] ; then
    backup_name="$(basename "${1}")"

    # directory should have timestamp-formatted name
    # (incl. optional in-progress denotion, i.e. leading '.')
    if echo "${backup_name}" | grep -q -E "^\.?[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]{6}$" ; then
      while IFS= read -r line ; do
        # does path start with destination?
        destination="$(destination_config_mount "${line}")/Backups.backupdb"
        if echo "$1" | grep -q "${destination}" ; then
          # search for directory only within machine directories in destination path
          find "${destination}" -mindepth 2 -maxdepth 2 -type d -name "${backup_name}" > /dev/null && match=true
        fi
      done < "${config_path}/destinations"
    fi
  fi
  $match
}

backup() {
  if [ -n "$1" ] ; then
    if ! has_destination_uuid "$1" ; then
      echo "Error! No destination found with ID '$1'!"
      exit 1
    fi
  fi

  while IFS= read -r line ; do
    rsync_dest_mount=""
    rsync_dest=""
    rsync_dest_final="$(date "+%Y-%m-%d-%H%M%S")"
    rsync_dest_tmp=".${rsync_dest_final}"
    rsync_dest_prev=""
    rsync_success=false

    if [ -n "$1" ] ; then
      if [ "${line}" = "${1}=$(destination_mount_by_uuid "${1}")" ] ; then
        rsync_dest_mount="$(destination_mount_by_uuid "$1")"
      else
        continue
      fi
    else
      rsync_dest_mount="$(destination_config_mount "${line}")"
    fi
    rsync_dest="${rsync_dest_mount}/Backups.backupdb/${host}/${rsync_dest_tmp}/"

    if is_destination_remote "${rsync_dest_mount}" ; then
      echo "ERROR! Could not backup to remote destination '${rsync_dest_mount}' because remote destinations are not yet supported!"
      return 1
    elif has_destination_mount_in_progress_backup "${rsync_dest_mount}" ; then
      echo "ERROR! Could not start backup to destination '${rsync_dest_mount}' because there is an in progress backup!"
      return 1
    fi

    if ! has_destination_mount_previous_backup "${rsync_dest_mount}" ; then
      $verbose && echo "Starting full backup to '${rsync_dest}'..."
      rsync \
        --recursive \
        --perms \
        --owner \
        --group \
        --times \
        --links \
        --delete \
        --delete-excluded \
        --exclude-from="${config_path}/exclusions" \
        "/" \
        "${rsync_dest}" && rsync_success=true
    else
      $verbose && echo "Starting incremental backup to '${rsync_dest}'..."
      rsync_dest_prev="$(destination_mount_previous_backup "${rsync_dest_mount}")"
      rsync \
        --recursive \
        --perms \
        --owner \
        --group \
        --times \
        --links \
        --delete \
        --delete-excluded \
        --exclude-from="${config_path}/exclusions" \
        --link-dest="${rsync_dest_prev}" \
        "/" \
        "${rsync_dest}" && rsync_success=true
    fi
    if $rsync_success ; then
      $verbose && echo "Successfully completed backup to '${rsync_dest}'."
      destination_mount_finalize_backup "${rsync_dest_mount}" "${rsync_dest_tmp}" "${rsync_dest_final}"
    else
      echo "ERROR! Unknown errors occurred during backup to  '${rsync_dest}'!"
    fi
  done < "${config_path}/destinations"
}

delete_backup() {
  if [ -z "$1" ] ; then
    echo "Error! Must provide a backup path!"
    return 1
  elif ! is_backup_directory "$1" ; then
    echo "Error! Unable to delete backup '${1}' because it is not a valid backup directory!"
    return 1
  fi

  [ "$(basename "$1" | cut -c 1-1)" = "." ] && backup_type="in progress backup" || backup_type="backup"
  $verbose && echo "Deleting ${backup_type} '${1}'..."
  if rm -r "$1" ; then
    $verbose && echo "Successully deleted ${backup_type} '${1}'"
  else
    echo "Failed to delete ${backu_type} '${1}'!"
    return 1
  fi
}

delete_in_progress_backups() {
  if [ -z "$1" ] ; then
    echo "Error! Must provide a machine directory!"
    return 1
  elif ! is_machine_directory "$1" ; then
    echo "Error! Unable to delete in progress backups in '${1}' because it is not a machine directory!"
    return 1
  fi

  $verbose && echo "Deleting in progress backups in '${1}/'..."
  in_progress_temp="$(mktemp)"
  if [ ! -f "${in_progress_temp}" ] ; then
    echo "Error! Unable to create temporary file!"
    return 1
  fi
  machine_in_progress_backups >> "${in_progress_temp}"

  num_in_progress=0
  num_deleted=0
  delete_success=false
  while IFS= read -r line ; do
    num_in_progress="$(( num_in_progress + 1 ))"
    in_progress="$(basename "${line}")"
    if delete_backup "${line}" ; then
      delete_success=true
      num_deleted="$(( num_deleted + 1 ))"
    fi
  done < "${in_progress_temp}"
  rm "${in_progress_temp}"

  if [ $num_in_progress -eq 0 ] ; then
    delete_success=true
    $verbose && echo "No in progress backups found."
  elif $delete_success ; then
    $verbose && echo "Successfully deleted ${num_in_progress} in progress backup(s) in '${1}/'"
  else
    $verbose && echo "Error! Failed to delete ${num_deleted} of ${num_in_progress} in progress backup(s) in '${1}/'!"
  fi
  $delete_success
}

main() {
  # parse input args
  if [ $# -eq 0 ]; then
    usage
    exit 1
  fi
  while [ $# -gt 0 -a -z "${verb}" ]; do
    case "$1" in
      -h|--help|help)
        usage
        exit
        ;;
      -v)
        verbose=true
        ;;
      -V|--version|version)
        version
        exit
        ;;
      setdestination|destinationinfo|removedestination|machinedirectory|listbackups|addexclusion|removeexclusion|isexcluded|startbackup|stopbackup|latestbackup|delete|deleteinprogress)
        verb="$1"
        ;;
      *)
        echo "Unknown verb '${1}'."
        usage
        exit 1
        ;;
    esac
    shift
  done

  if [ -z "${verb}" ] ; then
    usage
    exit 1
  fi

  init_configs

  case "${verb}" in
    setdestination)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      setdestination_append=false
      while getopts a opt_name ; do
        case "${opt_name}" in
          a)
            setdestination_append=true
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND - 1 ))
      if ! $setdestination_append && is_valid_destination "$1" ; then
        remove_all_destinations
      fi
      add_destination "$1"
      ;;
    destinationinfo)
      while getopts X opt_name ; do
        case "${opt_name}" in
          X)
            echo "The '-${opt_name}' option for '${verb}' verb is not supported at this time."
            usage
            exit 1
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND - 1 ))
      print_destinations
      ;;
    removedestination)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      remove_destination "$1"
      ;;
    machinedirectory)
      machine_directory
      ;;
    listbackups)
      machine_backups
      ;;
    addexclusion)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      addexclusion_fixed=false
      while getopts p opt_name ; do
        case "$opt_name" in
          p)
            addexclusion_fixed=true
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND -1 ))

      if ! $addexclusion_fixed ; then
        echo "Error! The '-p' option is required for the '${verb}' verb."
        exit 1
      fi
      add_exclusion "$@"
      ;;
    removeexclusion)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      removeexclusion_fixed=false
      while getopts p opt_name ; do
        case "$opt_name" in
          p)
            removeexclusion_fixed=true
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND -1 ))

      if ! $removeexclusion_fixed ; then
        echo "Error! The '-p' option is required for the '${verb}' verb."
        exit 1
      fi
      remove_exclusion "$@"
      ;;
    isexcluded)
      while getopts X opt_name ; do
        case "${opt_name}" in
          X)
            echo "The '-${opt_name}' option for '${verb}' verb is not supported at this time."
            usage
            exit 1
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND - 1 ))
      is_excluded "$@"
      ;;
    startbackup)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      startbackup_block=false
      startbackup_rotation=false
      startbackup_dest_uuid=""
      while getopts "brd:" opt_name ; do
        case "${opt_name}" in
          b)
            startbackup_block=true
            ;;
          r)
            startbackup_rotation=true
            echo "The '-${opt_name}' option for '${verb}' verb is not supported at this time."
            ;;
          d)
            startbackup_dest_uuid="$OPTARG"
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND - 1 ))

      if ! $startbackup_block; then
        echo "Error! The '-b' option is required for the '${verb}' verb."
        exit 1
      fi
      backup "${startbackup_dest_uuid}"
      ;;
    stopbackup)
      echo "Error! The '${verb}' verb is not supported at this time."
      exit 1
      ;;
    latestbackup)
      machine_backup_latest
      ;;
    delete)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      delete_destination=""
      delete_timestamp=""
      delete_path=""
      while getopts "d:t:p:" opt_name ; do
        case "${opt_name}" in
          d)
            delete_destination="$OPTARG"
            ;;
          t)
            delete_timestamp="$OPTARG"
            ;;
          p)
            delete_path="$OPTARG"
            ;;
          ?)
            usage
            exit 1
            ;;
        esac
      done
      shift $(( $OPTIND - 1 ))

      if [ -n "$delete_path" -a -n "$delete_destination" -a -n "$delete_timestamp" ] ; then
        echo "Error! The '-p' option is mutually exclusive to the '-d' & '-t' options for the '${verb}' verb."
        usage
        exit 1
      elif [ -z "$delete_path" -a \( -z "$delete_destination" -o -z "$delete_timestamp" \) ] ; then
        echo "Error! Both the '-d' & '-t' options are required when not using the '-p' option for the '${verb}' verb."
        usage
        exit 1
      elif [ -z "$delete_path" -a -n "$delete_destination" -a -n "$delete_timestamp" ] ; then
        if ! is_valid_destination "$delete_destination" ; then
          echo "Error! '${delete_destination}' is not a valid destination!"
          usage
          exit 1
        fi
        delete_path="${delete_destination}/Backups.backupdb/${host}/${delete_timestamp}"
      fi
      delete_backup "$delete_path"
      ;;
    deleteinprogress)
      ! is_root && echo "ERROR! The '${verb}' verb requires root privileges!" && exit 1
      delete_in_progress_backups "$1"
      ;;
  esac
}

main "$@"
